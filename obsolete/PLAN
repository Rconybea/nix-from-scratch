1. crosstools-ng gives us gcc-13.2 in ~/ext2/bin
   e.g. ~/ext2/bin/x86_64-pc-linux-gnu-gcc

2. try adding to nix store

   - ensure PATH has ~/nixroot/bin

     $ ~/nixroot/bin/nix store add --dry-run --hash-algo sha256 ~/nxfs-toolchain
     /home/roland/nixroot/nix/store/pcj0icrgqi1j0c6jlm1bacsfrqb15cqr-nxfs-toolchain

3. verify can run gcc from the store

     $ ~/nixroot/nix/store/pcj0icrgqi1j0c6jlm1bacsfrqb15cqr-nxfs-toolchain/bin/x86_64-pc-linux-gnu-gcc --version
     x86_64-pc-linux-gnu-gcc (crosstool-NG 1.26.0) 13.2.0
     Copyright (C) 2023 Free Software Foundation, Inc.
     This is free software; see the source for copying conditions.  There is NO
     warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

4. find the hash nix is using

     $ ~/nixroot/bin/nix-hash --type sha256 --base32 ~/nixroot/nix/store/pcj0icrgqi1j0c6jlm1bacsfrqb15cqr-nxfs-toolchain/
     0nk5cnsbw59pdm1rjpgj5wk0a9dbwiw81jvkyaid9g45hnz19wvi

   need base32 representation, because that's the shorter form that
   we can use in a derivation

5. verify system

     $ ~/nixroot/bin/nix repl
     nix-repl> builtins.currentSystem
     "x86_64-linux"

6. make a derivation that refers to known store hash

     $ cat nix-from-scratch/nix-experiments/ex3/default.nix
     derivation { name = "nxfs-toolchain"; system = "x86_64-linux"; builder = ./builder.sh; buildInputs = []; outputHashAlgo = "sha256"; outputHash = "0nk5cnsbw59pdm1rjpgj5wk0a9dbwiw81jvkyaid9g45hnz19wvi"; outputHashMode = "recursive"; }

   Note that we can change anything else about the derivation
   as long as we keep the name ("fod-example-simple") and hash ("abcdefg..=") the same.

6. 'build' it

     $ ~/nixroot/bin/nix-build nix-from-scratch/nix-experiments/ex3/default.nix
     $ echo $?
     0

     $ ~/nixroot/bin/nix-build nix-from-scrtch/nix-experiments/ex3/default.nix
     /home/roland/nixroot/nix/store/pcj0icrgqi1j0c6jlm1bacsfrqb15cqr-nxfs-toolchain

7. see derivation in nix store

     $ ls ~/nixroot/nix/store/*.drv | grep toolchain
     /home/roland/nixroot/nix/store/qgrwfw6jn044wj30knns2g88w4m4qdrs-nxfs-toolchain.drv

     $ ~/nixroot/bin/nix derivation show ~/nixroot/nix/store/qgrwfw6jn044wj30knns2g88w4m4qdrs-nxfs-toolchain.drv
     warning: The interpretation of store paths arguments ending in `.drv` recently changed.
     If this command is now failing try again with '/home/roland/nixroot/nix/store/qgrwfw6jn044wj30knns2g88w4m4qdrs-nxfs-toolchain.drv^*'
     {
       "/home/roland/nixroot/nix/store/qgrwfw6jn044wj30knns2g88w4m4qdrs-nxfs-toolchain.drv": {
         "args": [],
         "builder": "/home/roland/nixroot/nix/store/3q7wav2gr15dxfnwdw840rwgbpspzqc0-builder.sh",
         "env": {
           "buildInputs": "",
           "builder": "/home/roland/nixroot/nix/store/3q7wav2gr15dxfnwdw840rwgbpspzqc0-builder.sh",
           "name": "nxfs-toolchain",
           "out": "/home/roland/nixroot/nix/store/pcj0icrgqi1j0c6jlm1bacsfrqb15cqr-nxfs-toolchain",
           "outputHash": "0nk5cnsbw59pdm1rjpgj5wk0a9dbwiw81jvkyaid9g45hnz19wvi",
           "outputHashAlgo": "sha256",
           "outputHashMode": "recursive",
           "system": "x86_64-linux"
         },
         "inputDrvs": {},
         "inputSrcs": [
           "/home/roland/nixroot/nix/store/3q7wav2gr15dxfnwdw840rwgbpspzqc0-builder.sh"
         ],
         "name": "nxfs-toolchain",
         "outputs": {
           "out": {
             "hash": "71f314be8585bcd4a2f273cb8078e4ab2505262ff25d99436d3715beb465655a",
             "hashAlgo": "sha256",
             "method": "nar",
             "path": "/home/roland/nixroot/nix/store/pcj0icrgqi1j0c6jlm1bacsfrqb15cqr-nxfs-toolchain"
           }
         },
         "system": "x86_64-linux"
       }
     }

8. try using nxfs-toolchain in another derivation

   This is not working at all

   Aha - problem is executable copied into nix store tries to invoke dynamic linker
   x86_64-ld-linux.so with path that isn't available during a sandbox build.

8-take2.

   Import as fixed-output derivations,
   externally-provided packages:

8a. nxfs-sysroot-0

   This gets libc, x86_64-ld-linux.so into nix store

8b. nxfs-bash-0

   Before taking hash, use patchelf --set-interpreter to set linker
   to in-store dynamic linker

8-take3.

   Can't get anything to run from inside nix-build,
   unless invoke ld-linux-x86-64.so explicitly.
   Suspect this is an outcome of using crosstools-ng to build compiler.
   Noticing that lddtree has in-store libc (built by crosstools ng) with interpreter
   /lib64/ld-linux-x86-64.so.2

   We want libc with interpreter path/to/nix/store/$hash-sysroot/lib/ld-linux-x86-64.so.2

   We'd love to patch libc to use it's associated interpreter _before_ we put it into the
   nix store for the first time.  But that isn't possible, because fixed-output derivation
   means it's content addressed, so we don't know hash until after final bits-to-be-imported
   are fully determined.

   Instead: will import sufficient tools to migrate libc to a genuinely in-store version,
   starting from a regular nix derivation.  This means we're going to patch in-store
   libc and friends using in-store tools

   New Plan:
   - prepare fixed-output-derivation tools:
     - bash
     - patchelf
     - tar
     - coreutils
   - write derivation, where builder looks like:
     - all components invoked using explicit call to ld-linux
     - copy stage0 libc (using tar)
     - patchelf to point to itself
     - patchelf print interpreter on libc.so
