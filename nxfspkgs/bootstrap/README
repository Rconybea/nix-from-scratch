----------------------------------------------------------------
TL;DR

Prerequisites:
1. {nix, toolchain} built from source.
   See nix-from-scratch/pkgs/nix, nix-from-scratch/toolchain/toolchain
2. SSL certificates in known location.
   On ubuntu these are in /etc/ssl/certs.
   If they're in a nonstandard location, may already have SSL_CERT_DIR pointing to them.
   Alternatively openssl can tell you its default location:
     $ openssl version -d
     OPENSSLDIR: "/usr/lib/ssl"
   (Note that on ubuntu /usr/lib/ssl/certs is symlink to /etc/ssl certs)
   Although we copy these into nix store in stage 0,
   we won't need them until much later, as part of stdenv fetchUrlBoot

Then:
  $ cd nix-from-scratch/nxfspkgs/bootstrap
  $ ./build-stage0.sh
Or see "Procedure for each package foo" below to build+adopt packages individually

----------------------------------------------------------------
Strategy

Starting with empty nix store.  Long-term (will take multiple passes)
goal is to build a viable version of stdenv.

Short-term goal is get a foundation with which we can assemble packages
(using our own nix-from-scratch-provided nix expressions),
from native .nix files

Build environment

Need:
- /home/roland/nixroot/bin         (e.g. for nix-build)

In this phase, we adopt externally-built packages into the nix store.
Packages built outside nix will depend on libraries (such as libc.so)
in locations (like /usr/lib) that aren't accessible during a nix build.

In ../bootstrap-1 we'll redirect these paths to new locations in the nix
store. In this phase we just import them as-is.

----------------------------------------------------------------
Install order

0.  toolchain.         See nix-from-scratch/toolchain/toolchain
                       build + isntall to NXFS_TOOLCHAIN_PREFIX [$(HOME)/nxfs-toolchain]
1.  nix deps.          See nix-from-scratch/{Makefile,pkgs}
                       build + install to PREFIX [$(HOME)/ext]
2.  nix.               built from source.  see nix-from-scratch/pkgs/nix
                       Install to NIX_PREFIX=$(HOME)/nixroot
3.  nxfs-toolchain-0.  import toolchain into NIXROOT/nix/store     (copied from NXFS_TOOLCHAIN)
                       This include gcc, glibc, ld-linux-x86-64, ..

remaining stage0 steps can be done in any order (see following section 'Procedure for each package' for details)
In each step we recompile with linker flags that point to the nix store toolchain,
established in nxfs-toolchain-0

4.  nxfs-patchelf-0.   patchelf 0.18.0  build in stage0, install (to ./patchelf/),  then run ./copy2nix.sh
5.  nxfs-gnumake-0.    gnumake 4.4.1.   build in stage0, install (to ./gnumake/),   then run ./copy2nix.sh
6.  nxfs-coreutils-0.  coreutils 9.5.   build in stage0, install (to ./coreutils/), then run ./copy2nix.sh
7.  nxfs-bash-0.       bash 5.2.32.     build in stage0, install (to ./bash/),      then run ./copy2nix.sh
8.  nxfs-tar-0.        tar 1.35         build in stage0, install (to ./tar/),       then run ./copy2nix.sh
9.  nxfs-sed-0.        sed 4.9          build in stage0, install (to ./sed/),       then run ./copy2nix.sh
10. nxfs-grep-0.       grep 3.11        build in stage0, install (to ./grep/),      then run ./copy2nix.sh
11. nxfs-gawk-0.       gawk 5.3.0       build in stage0, install (to ./gawk/),      then run ./copy2nix.sh
12. nxfs-libxcrypt-0.  libxcrypt        build in stage0, install (to ./libxcrypt),  then run ./copy2nix.sh
13. nxfs-findutils-0.  findutils 4.10.0 build in stage0, install (to ./findutils),  then run ./copy2nix.sh
14. nxfs-diffutils-0.  diffutils 3.10   build in stage0, install (to ./diffutils),  then run ./copy2nix.sh
15. nxfs-gzip-0.       gzip 1.13        build in stage0, install (to ./gzip),       then run ./copy2nix.sh
16. nxfs-cacert-0.     n/a              copy from host                              just run ./copy2nix.sh
17. nxfs-perl-0.       perl 5.40.0      build in stage0, install (to ./perl/),      then run ./copy2nix.sh

perl,m4 likely not needed in stage0 (as of 4jan2025),  keeping around in case need them later
(20). nxfs-m4-0.         m4 1.4.19       build in stage0, install (to ./m4/),        then run ./copy2nix.sh

Then continue in ../bootstrap-1

----------------------------------------------------------------
Procedure for each package foo (excepting nxfs-toolchain-0, nxfs-cacert-0)

1.
  $ cd nix-from-scratch/nxfspkgs/bootstrap/nxfs-foo-0

Directory will initially contain files:
  stage0/      actual build (external to nix) prepared here.
  foo/         directory for build result, containing a 1-line README file
  copy2nix.sh  copy contents of foo/ (after building in stage0) to nix store
  builder.sh

Can create destination directory ./foo manually, if it was inadvertently omitted from git
  $ mkdir ./foo

2.
Except for nxfs-toolchain-0, nxfs-cacert-0:
  $ make -C stage0 install
or spelled-out:
  $ (cd stage0 && make fetch && make config && make compile && make install)

After this completes, destination directory ./foo will contain build output.

3.
  $ ./copy2nix.sh

Imports build artifacts ./foo into nix store,  and creates fixed-output derivation ./default.nix

4.
if all went well, then just
  $ nix-build
should immediately return store path for adopted build output

----------------------------------------------------------------
Typical Problems

1. for new bootstrap dir, staging directory (e.g. nxfs-bash-0/bash) must exist
   in advance.  Otherwise empty PREFIX result (e.g. see PREFIX:=... in nxfs-bash-0/bash/Makefile)

2. in each nxfs-foo-0/ with a fixed-output derivation, the derivation name
   ('foo' in 'derivation { name = "foo"; ... }'

   MUST MATCH the name of the directory subtree being imported into nix store.
   Store paths

     | context          | construction                |
     |------------------+-----------------------------+
     | nix store add .. | {hash} + {toplevel dirname} |
     | derivation       | (hash) + (derivation name)  |

   This constraint only applies to fixed-output derivations

design notes

1. During bootstrap, we don't have stdenv, so no stdenv.mkDerivation function.
   We can use a nxfspkgs path in a derivation, but it won't get recognized as a runtime dependency
   To introduce a runtime dependency, introduce a file into output directory, that contains
   store path for that dependency.

cookbook / howto / useful

1. nix-store -q --references /path/to/nix/store/foo.drv
