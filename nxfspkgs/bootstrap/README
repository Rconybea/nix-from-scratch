----------------------------------------------------------------
TL;DR

Prerequisites:
1. {nix, crosstools-ng} built from source.
   See nix-from-scratch/pkgs/nix, nix-from-scratch/pkgs/crosstools-ng

Then:
  $ cd nix-from-scratch/nxfspkgs/bootstrap
  $ ./build-stage0.sh
Or see "Procedure for each package foo" below to build+adopt packages individually

----------------------------------------------------------------
Strategy

Starting with empty nix store.  Long-term (will take multiple passes)
goal is to build a viable version of stdenv.

Short-term goal is get a foundation with which we can assemble packages
(using our own naive nix-from-scratch-provided nix expressions)
from native .nix files

Build environment

Need:
- /home/roland/nixroot/bin         (e.g. for nix-build)

In this phase, we adopt externally-built packages into the nix store.
Packages built outside nix will depend on libraries (such as libc.so)
in locations (like /usr/lib) that aren't accessible during a nix build.

In ../bootstrap-1 we'll redirect these paths to new locations in the nix
store. In this phase we just import them as-is.

----------------------------------------------------------------
Install order

0.  deps for {nix, crosstools-ng}.  See nix-from-scratch/Makefile.
                       build + install to PREFIX=$(HOME)/ext
1.  nix.               built from source.  see nix-from-scratch/pkgs.
                       Install to NIX_PREFIX=$(HOME)/nixroot
2.  crosstools-ng.     see nix-from-scratch/pkgs/crosstools-ng.
3.  crosstools.        see nix-from-scratch/crosstool.  Directory for configure+install toolchain,
                       install to NXFS_TOOLCHAIN=$(HOME)/nxfs-toolchain

4.  nxfs-toolchain-0.  crosstools toolchain in NIXROOT/nix/store     (copied from NXFS_TOOLCHAIN)
5.  nxfs-sysroot-0.    crosstools ld-linux,libc in NIXROOT/nix/store (copied from NXFS_TOOLCHAIN)

remaining stage0 steps can be done in any order.
6.  nxfs-patchelf-0.   patchelf 0.18.0 build in stage0, install (to ./patchelf/),  then run ./copy2nix.sh
7.  nxfs-gnumake-0.    gnumake 4.4.1.  build in stage0, install (to ./gnumake/),   then run ./copy2nix.sh
8.  nxfs-coreutils-0.  coreutils 9.5.  build in stage0, install (to ./coreutils/), then run ./copy2nix.sh
9.  nxfs-bash-0.       bash 5.2.32.    build in stage0, install (to ./bash/),      then run ./copy2nix.sh
10. nxfs-tar-0.        tar 1.35        build in stage0, install (to ./tar/),       then run ./copy2nix.sh
11. nxfs-sed-0.        sed 4.9         build in stage0, install (to ./sed/),       then run ./copy2nix.sh
12. nxfs-grep-0.       grep 3.11       build in stage0, install (to ./grep/),      then run ./copy2nix.sh
13. nxfs-gawk-0.       gawk 5.3.0      build in stage0, install (to ./gawk/),      then run ./copy2nix.sh
14. nxfs-libxcrypt-0.  libxcrypt       build in stage0, install (to ./libxcrypt),  then run ./copy2nix.sh

perl,m4 likely not needed in stage0 (as of 4jan2025),  keeping around in case need to revise
(15). nxfs-perl-0.       perl 5.40.0     build in stage0, install (to ./perl/),      then run ./copy2nix.sh
(16). nxfs-m4-0.         m4 1.4.19       build in stage0, install (to ./m4/),        then run ./copy2nix.sh

Then continue in ../bootstrap-1

----------------------------------------------------------------
Procedure for each package foo (excepting nxfs-toolchain-0, nxfs-sysroot-0)

1.
  $cd nix-from-scratch/nxfspkgs/bootstrap/nxfs-foo-0

2.
Except for nxfs-toolchain-0, nxfs-sysroot-0:
  $ (cd stage0 && make fetch && make config && make compile && make install)

3.
  $ ./copy2nix.sh

4.
if all went well, then just
  $ nix-build
should immediately return store path for adopted build output

----------------------------------------------------------------
Typical Problems

1. for new bootstrap dir, staging directory (e.g. nxfs-bash-0/bash) must exist
   in advance.  Otherwise empty PREFIX result (e.g. see PREFIX:=... in nxfs-bash-0/bash/Makefile)

2. in each nxfs-foo-0/ with a fixed-output derivation, the derivation name
   ('foo' in 'derivation { name = "foo"; ... }'

   MUST MATCH the name of the directory subtree being imported into nix store.
   Store paths

     | context          | construction                |
     |------------------+-----------------------------+
     | nix store add .. | {hash} + {toplevel dirname} |
     | derivation       | (hash) + (derivation name)  |

   This constraint only applies to fixed-output derivations

   In particular for sysroot, since we're picking up subdir from inside crosstools-ng toolchain,
   name will be 'sysroot'

design notes

1. During bootstrap, we don't have stdenv, so no stdenv.mkDerivation function.
   We can use a nxfspkgs path in a derivation, but it won't get recognized as a runtime dependency
   To introduce a runtime dependency, introduce a file into output directory, that contains
   store path for that dependency.

cookbook / howto / useful

1. nix-store -q --references /path/to/nix/store/foo.drv
