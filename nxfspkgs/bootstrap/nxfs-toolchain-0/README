# To build:
#   will be using toolchain built from source.
#   (assumed here to be in [~/nxfs-toolchain]
#
#   Preparation
#   - toolchain in ~/nxfs-toolchain
#
#   - supporting deps for {toolchain, nix} built locally,
#     using https://github.com/rconybea/nix-from-scratch
#     See nix-from-scratch/.github/workflows/main.yml for possible build sequence
#
#   - nix          in nix-from-scratch/pkgs/nix
#     Assuming nix installed to ~/nixroot:
#     1. nix binariess in ~/nixroot/bin
#     2. nix store     in ~/nixroot/nix/store
#
#   Intended use case is in stdenv-bootstrap from empty nix store,
#   For example to use nix on a host where none of the official
#   remedies apply.  Or just because we can.
#
# ----------------------------------------------------------------
#
#   Adopt cross-toolchain into nix store directly.
#   Assuming cross toolchain installed to ~/nxfs-toolchain:
#
#   0. enable nix experimental features
#
#       # .config/nix/nix.conf:
#       experimental-features = nix-command
#
#   1. set NXFS_TOOLCHAIN_PREFIX to location of installed toolchain
#
#   2. copy into nix store:
#
#       $ ./copy2nix.sh
#
#       - establishes sha256 hash for installed toolchain
#       - copies toolchain into local nix store
#       - generates fixed output derivation ./default.nix
#
#   3. verify derivation:
#
#      This should succeed immediately:
#
#       $ nix-build ./default.nix
#       /home/roland/nixroot/nix/store/5wh5s3abc7v2zh7fp4961f40hbv89ni6-nxfs-toolchain.drv
#
#       $ ls result
#       bin  cross  etc  include  lib  lib64  libexec  sbin  share  var  x86_64-pc-linux-gnu
#       $ ls l ~/nixroot/nix/store/*nxfs-toolchain.drv
#
#      Can also pretty-print the store derivation, will see a few details attached
#       $ nix derivation show $(ls -d ~/nixroot/nix/store/*nxfs-toolchain.drv)
