Package repository (in the style of nixpkgs) for bootstrap.

Separate from nixpkgs, because we want to use this to bootstrap
starting with nix store that's empty except for deus-ex-machina nxfs-toolchain.

We could /probably/ introduce nxfspkgs as a nixpkgs overlay.
We don't attempt this because we insist on being able to bootstrap from a restricted state, where
nixpkgs packages won't be usable until nxfspkgs bootstrap is complete...  so we need
it to be clear that that bootstrap doesn't depend on nixpkgs.

----------------------------------------------------------------
Prerequisites

1. dependencies for local {nix, toolchain} installed.
   See nix-from-scratch/Makefile.  Individual packages in nix-from-scratch/pkgs/.

   This guide prepared with build-time deps installed to ${HOME}/ext
   (see PREFIX in nix-from-scratch/mk/prefix.mk)

2. local nix built from source.

   This guide assumes nix installed to ${HOME}/nixroot,
   with nix store in ${HOME}/nixroot/nix/store.
   NIX_PREFIX, NIX_STORE_DIR in nix-from-scratch/mk/prefix.mk

3. native toolchain (gcc, libc etc.) prepared

   See nix-from-scratch/toolchain/toolchain

   This guide prepared with toolchain installed to ${HOME}/nxfs-toolchain
   (see NXFS_TOOLCHAIN_PREFIX in nix-from-scratch/mk/prefix.mk)

----------------------------------------------------------------
Tower

           +----------------------------------+
           |            <nxfspkgs>            |
           +----------------------------------+
           |            bootstrap-3           |
           +----------------------------------+
           |            bootstrap-2           |
           +-----------------+----------------+
           | bootstrap-1     | bootstrap-pkgs |
           +-----------------+----------------+
           |            bootstrap             |
           +----------------------------------+

----------------------------------------------------------------
Directory Layout

nxfspkgs
+- default.nix             top-level nxfspkgs entry point
+- impure.nix              read .config, overlays, env vars
+- nxfspkgs.nix            nxfs package collection
+- bootstrap/              bootstrap stage0
+- bootstrap-1/            bootstrap stage1
+- bootstrap-1-demo/       tests/demos for stage 1 results
+- bootstrap-2/            bootstrap stage2
+- bootstrap-2-demo/       tests/demos for stage 2 results
+- bootstrap-3/            bootstrap stage3
+- bootstrap-3-demo/       tests/demos for stage 3 results
+- bootstrap-pkgs/         nix packages. used by {stage2, stage3}
+- build-support
   +- autotools
      +- default.nix       mkDerivation
+- lib/                    nix packages. used by {bootstrap, post}
   +- makeCallPackage.nix
+- nix-pills/              incidental.  early nix pills experiments
+- stdenv/                 (abandoned) attempt to provide stdenv from scratch
+- stdenv-to-nix/          (nice try) nixpkgs stdenv using nxfspkgs bootstrap


----------------------------------------------------------------
Bootstrap

0. (may) start with empty nix store

1. stage0 - adopt externally-compiled toolchain into nix store.
            Includes dynamic linker (ld-linux-x86-64.so), libc, gcc, linux header,
            coreutils, bash, patchelf, tar.

            Goal: everything needed by toolchain is present in nix store.
            It's in an awkward-to-use state however: ELF executables and libraries
            still refer to their external original locations and to /lib64.

            This stage is special: it's the only bootstrap stage that uses
            binaries prepared on host outside nix environment.
            In practice not expected to be reproducible.

2. stage1 - incrementally redirect stage0 components so that they refer to their
            permanent in-store locations.

            This is accomplished entirely using nix derivations, involving
            just artifacts prepared in stage0 and stage1.

            Goal: externally-provided toolchain wholly re-homed to nix store.

3. stage2 - now that we have an in-store toolchain, use to build a native toolchain,
            from source.

----------------------------------------------------------------
Build

0. Satisfy prerequsites above
  $ cd nix-from-scratch/nxfspkgs

1.
  $ (cd ./bootstrap && ./build-stage0)
Or, see ./bootstrap/README to build+adopt packages individually

2.
  $ nix-build -A nxfs-bootstrap-1
Or, see ./bootstrap-1/README to prepare packages individually

3. WIP asof 4jan2025

----------------------------------------------------------------
Details

1. stage0 (see nxfspkgs/bootstrap)

   starting with empty nix store.

   Purpose of stage0 is to prepare a foundation for a toolchain that doesn't use
   anything outside the nix store.

   Prepare necessary packages outside nix (using crosstool-ng toolchain).
   upload to nix store as fixed-output derivations.

   Need at least the following packages to run gcc
   - bootstrap/nxfs-toolchain-0  gcc, g++, binutils     see nix-from-scratch/crosstool/.config
   - bootstrap/nxfs-sysroot-0    libc, ld-linux.so      see nix-from-scratch/crosstool/.config
   - bootstrap/nxfs-patchelf-0   patchelf               v 0.18.0 asof 4jan2025
   - bootstrap/nxfs-gnumake-0    make                   v 4.4.1  asof 4jan2025
   - bootstrap/nxfs-coreutils-0  mkdir, chmod..         v 9.5    asof 4jan2025
   - bootstrap/nxfs-bash-0       bash                   v 5.2.32 asof 4jan2025
   - bootstrap/nxfs-tar-0        tar                    v 1.35   asof 4jan2025
   - bootstrap/nxfs-sed-0        sed                    v 4.9    asof 4jan2025
   - bootstrap/nxfs-grep-0       grep                   v 3.11   asof 4jan2025
   - bootstrap/nxfs-libxcrypt-0  libxcrypt library

   The libc.so (prepared outside the nix store) expects to be installed to /lib/x8_64-linux-gnu/.

   This location isn't accessible from inside a nix build,
   Since we can only import artifacts prepared outside the nix store as content-addressed
   fixed-output derivations,  we also can't patch them from outside the nix store.

   This means an in-store build will have to invoke the dynamic loader explicitly.
   For example scripts will invoke bash using
     $sysroot/lib/ld-linux-x86_64.so $bash args...
   instead of just
     $bash args...

2. stage1 (see nxfspkgs/bootstrap-1)

   Purpose of stage1 is to:
   1. establish an in-store sysroot, containing {libc.so, ld-linux.so} that
      correctly refer to each other's in-store location
   2. provide redirected versions of other stage0 packages

   Accomplish this by copying stage0 artifacts and patching with patchelf.
   This will use a regular nix derivation.  Fixed output derivations will be back
   (with a vengeance) for additional toolchain components.

   Note we're not using a regular nixpgs-style derivation here.
   Can't use stdenv.mkDerivation, because we don't have stdenv yet.
   We could use nixpkgs/default.nix ingredients that don't depend on anything in stdenv.

   Might make sense to take nixpkgs as an argument, but deferring that possibility for now.
   In the meantime, just produce naked derivations.

   Build:
   - bootstrap-1/nxfs-sysroot-1          libc, ld-linux.so
   - bootstrap-1/nxfs-bash-1             bash
   - bootstrap-1/nxfs-redirect-elf-file  shell util
   - bootstrap-1/nxfs-patchelf-1         patchelf
   - bootstrap-1/nxfs-coreutils-1        mkdir,cp,head,basename,...
   - bootstrap-1/nxfs-tar-1              tar
   - bootstrap-1/nxfs-sed-1              sed
   - bootstrap-1/nxfs-gawk-1             gawk

3. stage2 (see nxfspkgs/bootstrap-2)

   In stage2 we use the stage1 toolchain to build a native toolchain.
   Everything in the native toolchain will have been compiled entirely from within
   nix-build.  This implies that "unreproducible outside dependencies"
   can enter only through the artifacts we provided in stage1.

   Although we wind up with a native toolchain, prepared from known pinned
   and checksumed source versions, we don't consider it reproducible.
   This is because the tools that prepared it were imported.

   The final stage2 toolchain still contains stray references to {stage0, stage1}
   paths, so has some visible non-reproducible parts.

4. stage3 (see nxfspkgs/bootstrap-3)

   In this stage we use the stage2 packages to build everything once more.
   We expect this to arrive at a fixpoint -- that is, that if we build the toolchain
   again, we'll wind up with the same results.

5. assembly (see nxfspkgs/bootstrap-tools)

   In this stage we prepare a merged FHS-like package with final binaries+libraries;
   we intend using this as a substitute for bootstrap

    $ nix build -f nixpkgs/pkgs/stdenv/linux/make-bootstrap-tools.nix bootstrapFiles




Look Ma!

1.
  $ cd nxfspkgs
  $ nix repl
  nix-repl> :l default.nix
  Added 1 variables.
  nix-repl> nxfs-toolchain-0
  «derivation /home/roland/nixroot/nix/store/5wh5s3abc7v2zh7fp4961f40hbv89ni6-nxfs-toolchain.drv»

2. simple non-customizable nxfs-toolchain derivation

  $ cd nxfspkgs
  $ nix-build default.nix -A nxfs-toolchain-0
  /home/roland/nixroot/nix/store/hpbqm9jq3r620ql61myn26w549xp7gm1-nxfs-toolchain
  $ ./result/bin/x86_64-pc-linux-gnu-gcc --version
  Copyright (C) 2023 Free Software Foundation, Inc.
  This is free software; see the source for copying conditions.  There is NO
  warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
